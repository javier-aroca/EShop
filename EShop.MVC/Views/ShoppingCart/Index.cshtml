@using EShop.MVC.Models
@model IEnumerable<ShoppingCartList>

@{
    ViewBag.Title = "Index";
}

<h2>Listado de productos en el carrito</h2>


<script>

    // scripts que validan la tarjeta segun algoritmo de Luhn.
    // No es lógica de negocio, así que considero que no es necesario llevarlo a CORE

    function validDate(dValue) {// valida que la fecha de vencimiento sea MM/YY
        var result = false;
        dValue = dValue.split('/');
        var pattern = /^\d{2}$/;

        if (dValue[0] < 1 || dValue[0] > 12)
            result = true;

        if (!pattern.test(dValue[0]) || !pattern.test(dValue[1]))
            result = true;

        if (dValue[2])
            result = true;

        if (result) alert("Introduce la fecha en formato MM/YY.");
        return result;
    }


    function isValidCard(cardNumber)//valida segun algoritmo de Luhn
    {
        var cardNumbersUpsideDown = cardNumber.split("").reverse(); // array de numeros al revés
        var j = 1; // contador de posiciones pares (impares en js)
        var sum = 0; // almacenar la suma de los numeros de la tarjeta
        for (var i = 0; i < cardNumbersUpsideDown.length; i++) { // bucle para recorrer el array
            cardNumbersUpsideDown[i] = parseInt(cardNumbersUpsideDown[i]); // convertir en un entero el número en esa posición

            // si encontramos una posicion par (impar en js)
            if (i === j) {
                cardNumbersUpsideDown[j] *= 2; // multiplicar por 2 los numeros de las posiciones pares(impares en js)

                if (cardNumbersUpsideDown[j] >= 10) { // si la multiplicación es mayor o igual a 10
                    cardNumbersUpsideDown[j] = cardNumbersUpsideDown[j].toString(); // convertir el numero en string
                    var separateNumbers = cardNumbersUpsideDown[j].split(''); // separar las cifras del numero
                    //convertir las cifras en numeros enteros con parseInt
                    separateNumbers[0] = parseInt(separateNumbers[0]);
                    separateNumbers[1] = parseInt(separateNumbers[1]);
                    cardNumbersUpsideDown[j] = separateNumbers[0] + separateNumbers[1]; // sumar las cifras
                }
                j += 2; // De lo contrario si la multiplicación es menor que 10 aumentar j en 2
            }
            sum += cardNumbersUpsideDown[i]; // suma de numeros en posiciones impares y nuevos numeros en posiciones pares
        }
        var messageToTheUser; // mensaje que se retornará al usuario
        sum % 10 === 0 ? messageToTheUser = 'Tarjeta de crédito válida' :
            messageToTheUser = 'Tarjeta de crédito no válida';
        return messageToTheUser; //retornar el mensaje

        return sum % 10 === 0 ? true : false;
    }


    //valida el pago de la compra
    function onClickConfirmarCompra()
    {

        if (!validDate(document.getElementById("cardDate").value))//la fecha de caducidad es MM/AA
        {
            if (isValidCard(document.getElementById("cardNumber").value))//algoritmo de Luhn
            {
                if (parseInt(document.getElementById("cardNumber").value) % 2 == 0)//tarjeta par=pago correcto
                {
                    location.href = '/ShoppingCart/CreateOrder?address=' + document.getElementById('address').value;//paso la dirección como parámetro
                }
                else
                {
                    alert("La tarjeta ha sido rechazada");//tarjeta impar= pago rechazado
                }
            }
            else
            {
                alert("El número de tarjeta no es válido");//Luhn incorrecto
            }
        }
        else
        {
            alert("La tarjeta tiene un formato de fecha incorrecto");//fecha incorrecta
        }        
    }
</script>

<table class="table">
    <tr>

        <th>
            @Html.DisplayNameFor(model => model.Product)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Quantity)
        </th>

        <th></th>
    </tr>

  

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Product.Name) 
                
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Quantity)
            </td>

            <td>

                @Html.ActionLink("Eliminar", "Delete", new { id = item.Id })
            </td>
         </tr>
    }

</table>


<dl> @*datos para envío y pago*@
    <p><label for="address">Dirección de envío:</label></p>

    <p><input type="text" id="address" name="address"></p>

    <p><label for="cardNumber">Número de tarjeta:</label></p>
    <p><input type="text" id="cardNumber" name="cardNumber"></p>

    <p><label for="cardDate">Caducidad:</label></p>
    <p><input type="text" id="cardDate" name="cardDate"></p>
</dl>

@*boton de confirmar compra*@
<input type="button"
       value="Confirmar compra"
       onclick="onClickConfirmarCompra()"
       }); />



